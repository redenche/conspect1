ghbikj 4 xtkjdtrf

пакет log содержит функцию fatal которая выполняет обе операции одновременно:
 Ввывод сообщения в терминале и остановку программы. (в этом контексте "фатально" называются ошибка, смертельная для вашей программы)

Такие функции и методы как readstring возвращают значение ошибки nil что по сути иозначает " здесь ничего нет ". 
другими словами, если переменная err = nil значит ошибки не было

println - print line
print
условные команды
для этого можно импользовать условные команды в которых блок кода (одна или несколько команд заключсенных в фигурые скобки)
выполняется только при истинности заданного условия

if(9>x){
fmt.Println("da");
}

как и другие языки go поддерживает многочисленное ветвление в условныхкомандахю Такие команды звписываются в форме 
if...else if...else


Условные команды используют логическое выражение результат которого равен true или false чтобы определить должен ли выполнятся содержащийся в них код

Если код должен выполнится только в том случае когда условие дает результат false ичпользуйте ! - оператор логического отрицания этот оператор берет
значение true и превращает в false

если код должен выполнятся только в том случае когда истины оба условия нужно использовать оператор
&& - и. А если он должен выпонятся когда хотябы одно из двух условий истина исползуется оператор || - или


package main

import (
"os"
"fmt"
"bufio"
"log"
)
func main(){
fmt.Print("введите свой балл:  ")
reader := bufio.NewReader(os.Stdin)
input, err := reader.ReadString('\n')
if(err != nil){
log.Fatal(err)
}
fmt.Println(input)
}

















